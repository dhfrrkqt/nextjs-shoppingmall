generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 정보
model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String?   // 소셜 로그인 시 null 가능
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  orders    Order[]
}

// 상품
model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Int
  stock       Int
  vector      Bytes     // pgvector 확장 사용
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  orderItems  OrderItem[]
}



// 주문
model Order {
  id           Int         @id @default(autoincrement())
  userId       Int
  totalAmount  Int
  status       OrderStatus @default(PENDING)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user         User        @relation(fields: [userId], references: [id])
  items        OrderItem[]
  payment      Payment?
}

// 주문 항목
model OrderItem {
  id         Int       @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  price      Int       // 구매 당시 가격
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  order      Order     @relation(fields: [orderId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])
}

// 결제 정보
model Payment {
  id             Int         @id @default(autoincrement())
  orderId        Int         @unique
  paymentMethod  String
  amount         Int
  status         PaymentStatus
  transactionId  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  order          Order       @relation(fields: [orderId], references: [id])
}

// 주문 상태 (열거형)
enum OrderStatus {
  PENDING
  PAID
  CANCELED
}

// 결제 상태 (열거형)
enum PaymentStatus {
  WAITING
  PAID
  FAILED
}

